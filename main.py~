import os
from flask import Flask, flash, session, redirect, url_for, escape, request, render_template
from werkzeug.utils import secure_filename
import networkx as nx
import matplotlib.pyplot as plt

ALLOWED_EXTENSIONS= set(['gml'])

app = Flask(__name__)

@app.route('/')
def index():
	if 'username' in session:
		#ajout commentaire
		#return 'Logged in as %s application GML' %escape(session['username'])

		return render_template('appgml.html')

	return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login(error=None):
	if request.method == 'POST':
		if request.form['username'] != 'admin' and request.form['password'] != '123':
			error = 'Invalid Login/Mot de passe'
		else:
			flash('Bienvenue sur APPGML')
			session['username'] = request.form['username']
			return redirect(url_for('index'))

	return render_template('login.html', error=error)


@app.route('/logout')
def logout():

	session.pop('username', None)
	return redirect(url_for('login'))

def allowed_file(filename):
	return '.' in filename and \
		filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET', 'POST'])
def upload_file():

	if request.method == 'POST':
		if 'file' not in request.files:
			flash('No file Part')
			return redirect(request.url)
		file = request.files['file']


		if file.filename == '':
			flash('No selected file')
			return redirect(request.url)

		if file and allowed_file(file.filename):

			filename = secure_filename(file.filename)

			file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
			flash('File upload')
			url=graph_gml(os.path.join(app.config['UPLOAD_FOLDER'], filename))
			return redirect(url_for('upload_file', filename=filename, url=url))
		else:
			flash('Format non valide')
			return redirect(request.url)

		return render_template('appgml.html')


def graph_gml(Path):
		Path_Png = "/home/sambo/projetTest/upload/aff.png"
#		Path_Png = "/home/malexandre/projetSouhi/upload/aff.png"
		graphNetworkx = nx.read_gml(Path)
		nx.draw(graphNetworkx)
		plt.savefig(Path_Png)
		return Path_Png

@app.route('/block_chain', methods=['GET', 'POST'])
def block_chain():
	if request.method == 'POST':

		# Create the blockchain and add the genesis block
		blockchain = [create_genesis_block()]
		previous_block = blockchain[0]
		# How many blocks should we add to the chain
		# after the genesis block
		nb = request.form['nombre_block']
		num_of_blocks_to_add = int(nb)

		# Add blocks to the chain
		for i in range(0, num_of_blocks_to_add):
		  block_to_add = next_block(previous_block)
		  blockchain.append(block_to_add)
		  previous_block = block_to_add
		  # Tell everyone about it!
		  print "Block #{} has been added to the blockchain!".format(block_to_add.index)
		  flash("Block #{} has been added to the blockchain!".format(block_to_add.index))
		  flash("Hash: {}\n".format(block_to_add.hash))
		  print "Hash: {}\n".format(block_to_add.hash) 
		return redirect(request.url)
	return render_template('BlockChain.html')


class Block:
  def __init__(self, index, timestamp, data, previous_hash):
    self.index = index
    self.timestamp = timestamp
    self.data = data
    self.previous_hash = previous_hash
    self.hash = self.hash_block()
  
  def hash_block(self):
    sha = hasher.sha256()
    sha.update(str(self.index) + 
               str(self.timestamp) + 
               str(self.data) + 
               str(self.previous_hash))
    return sha.hexdigest()

def create_genesis_block():
  # Manually construct a block with
  # index zero and arbitrary previous hash
  return Block(0, date.datetime.now(), "Genesis Block", "0")

def next_block(last_block):
  this_index = last_block.index + 1
  this_timestamp = date.datetime.now()
  this_data = "Hey! I'm block " + str(this_index)
  this_hash = last_block.hash
  return Block(this_index, this_timestamp, this_data, this_hash)
app.secret_key = "A0Zr98j/3yx R"
